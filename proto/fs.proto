syntax = "proto3";
package raid_fs;

import "error.proto";
import "google/protobuf/empty.proto";

/*
   We mimic POSIX file system API for the distributed storage system.
   However, we discard unsuitable abstractions for distributed systems
   such as special file types and file permission.
   For simplicity, paths consist of English letters and digits
   separated by '/' , where each path component has a max length of 127 chars.
   Paths are case-sensitive, relative paths like '.' and '..' are not supported.
*/

message OpenRequest {
  string path = 1;
  bool o_create = 2;
  bool o_excl = 3;
}

message OpenOKReply {
  uint64 fd = 1;
  uint64 file_size = 2;
}

message OpenReply {
  oneof test_oneof {
    Error error = 1;
    OpenOKReply ok = 2;
  }
}

message ReadRequest {
  uint64 fd = 1;
  uint64 offset = 2;
  uint64 count = 3;
}

message ReadOKReply {
  bytes data = 1;
  uint64 file_size = 2;
}

message ReadReply {
  oneof test_oneof {
    Error error = 1;
    ReadOKReply ok = 2;
  }
}

message WriteRequest {
  uint64 fd = 1;
  uint64 offset = 2;
  bytes data = 3;
}

message WriteOKReply {
  uint64 written_size = 1;
  uint64 file_size = 2;
}

message WriteReply {
  oneof test_oneof {
    Error error = 1;
    WriteOKReply ok = 2;
  }
}

message RemoveRequest {
  string path = 1;
}
message RemoveReply {
  optional Error error = 1;
}

message RemoveDirRequest {
  string path = 1;
}

message RemoveDirReply {
  optional Error error = 1;
}

message FileSystemInfoOKReply {
  string file_system_type = 1;
  uint64 file_system_version = 2;
  uint64 block_size = 3;
  uint64 file_number = 4;
  uint64 used_data_block_number = 5;
  uint64 free_data_block_number = 6;
}

message FileSystemInfoReply {
  oneof test_oneof {
    Error error = 1;
    FileSystemInfoOKReply ok = 2;
  }
}

service FileSystem {
  /* Open a file and return the fd. */
  /* o_create: If set to True, then create the file and parent directories on the fly. */
  /* o_excl: Ensure that this call creates the file; Otherwise, returns ERROR_EXISTED_FILE */
  rpc Open(OpenRequest) returns (OpenReply) {}
  /* Read a file. */
  rpc Read(ReadRequest) returns (ReadReply) {}
  /* Write a file. */
  rpc Write(WriteRequest) returns (WriteReply) {}
  /* Delete a file. */
  rpc Remove(RemoveRequest) returns (RemoveReply) {}
  /* Delete an empty directory. */
  rpc RemoveDir(RemoveDirRequest) returns (RemoveDirReply) {}
  /* Get information about the file system. */
  rpc GetFileSystemInfo(google.protobuf.Empty) returns (FileSystemInfoReply) {}
}
