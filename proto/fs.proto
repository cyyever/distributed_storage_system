syntax = "proto3";
package raid_fs;

import "errno.proto";
import "google/protobuf/empty.proto";

/*
   We mimic POSIX filesystem API for the distributed storage system.
   However, we discard unsuitable abstractions for distributed systems
   such as directories and file permission.
   Paths can contain hierarchical structure like '/' to organize related files,
   but they are simply treated as keys for files.
*/

message CreateRequest {
  string path = 1;
}

message CreateOKReply {
  uint64 fd = 1;
}

message CreateReply {
  oneof test_oneof {
    Errno errno = 1;
    CreateOKReply ok = 2;
  }
}

message OpenRequest {
  string path = 1;
  bool o_create = 2;
}

message OpenOKReply {
  uint64 fd = 1;
  uint64 size = 2;
}

message OpenReply {
  oneof test_oneof {
    Errno errno = 1;
    OpenOKReply ok = 2;
  }
}

message ReadRequest {
  uint64 fd = 1;
  uint64 offset = 2;
  uint64 count = 3;
}

message ReadOKReply {
  uint64 fd = 1;
  uint64 size = 2;
}

message ReadReply {
  oneof test_oneof {
    Errno errno = 1;
    ReadOKReply ok = 2;
  }
}

message WriteRequest {
  uint64 fd = 1;
  uint64 offset = 2;
  uint64 count = 3;
}

message WriteOKReply {
  uint64 fd = 1;
  uint64 size = 2;
}

message WriteReply {
  oneof test_oneof {
    Errno errno = 1;
    WriteOKReply ok = 2;
  }
}

message RemoveRequest {
  string path = 1;
}

service FileSystem {
  /* Create a file and return the fd. */
  rpc Create(CreateRequest) returns (CreateReply) {}
  /* Open a file and return the fd. */
  /* O_CREAT: If set to True, then create the file on the fly. */
  rpc Open(OpenRequest) returns (OpenReply) {}
  /* Read a file. */
  rpc Read(ReadRequest) returns (ReadReply) {}
  /* Write a file. */
  rpc Write(WriteRequest) returns (WriteReply) {}
  /* Delete a file. */
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty) {}
}
